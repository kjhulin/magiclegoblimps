#include "robot.h"

bool testCommand(string msg, string cmd)
{
 int len = StrLen(cmd);
 return (StrLen(msg) >= len && SubStr(msg,0,len) == cmd);
}

task receiveCommand()
{
 string msg = "";

 FOREVER
 {
  setLightOff();

  ReceiveMessage(INBOX,false,msg);

  if(StrLen(msg)>0)
  {
   if( testCommand(msg,"pan")
    || testCommand(msg,"stop")
    || testCommand(msg,"pid") )
   {
    continue;
   }
   
   ReceiveMessage(INBOX,true,msg);

   if( testCommand(msg,"left" ) )
   {
    turnLeftWait( 400, 300 );
    lineCorrect();
    stopWheels();
   }
   else if( testCommand(msg,"right" ) )
   {
    turnRightWait( 400, 300 );
    lineCorrect();
    stopWheels();
   }
   else if( testCommand(msg,"turnaround" ) )
   {
    turnAround();
   }
   //*
   else if( testCommand(msg,"calibrate" ) )
   {
    calibrate();
   }
   //*/
   else if( testCommand(msg,"correct") )
   {
    lineCorrect();
   }
   else if( testCommand(msg,"forward") )
   {
     lineFollow();
   }
   else if( testCommand(msg,"coordinates") )
   {
    int i,x,y,len=StrLen(msg);
    
    // get first space
    for( i=0; i<len; i++)
    {
     if( SubStr(msg,i,1) == " ")
     {
      x=i+1;
     }
    }
    // get second space
    for(; i<len; i++)
    {
     if( SubStr(msg,i,1) == " " )
     {
      y=i+1;
     }
    }
    // test for extra space
    for(; i<len; i++)
    {
     if( SubStr(msg,i,1) == " " )
     {
      break;
     }
    }
    //get new curX and curY
    if( x<y && y<i )
    {
     curX = SubStr(msg,x,y-x-1);
     curY = SubStr(msg,y,i-y); // might need to i-y+1
    }
    else
    {
     PlayTone(1000,50);
    }
   }
   else
   {
    PlayTone(1000,50);
   }

  }
 }
}

task cmdPan()
{
 string msg;

 FOREVER
 {
  ReceiveMessage(INBOX,false,msg);

  if( testCommand(msg,"pan") )
  {
   ReceiveMessage(INBOX,true,msg);

   msg = SubStr( msg, 4, StrLen(msg) );

   pan( StrToNum( msg ) ); // send deg
  }
  else if( testCommand(msg,"pid") )
  {
   ReceiveMessage(INBOX,true,msg);
   
   msg = SubStr( msg, 4, StrLen(msg) );
   
   pid( StrToNum(msg) ); // send angle
  }
 }
}

// only stops forward command
task cmdStop()
{
 string msg;

 FOREVER
 {
  ReceiveMessage(INBOX,false,msg);


  if( StrLen(msg)>0 && testCommand(msg,"stop") )
  {
   ReceiveMessage(INBOX,true,msg);

//   StopTask(receiveCommand); // requires Enhanced Firmware
//   StartTask(receiveCommand);

    setStatus(STOPPED);
    
    repeat(100)
     stopWheels();
  }
 }
}

task sendFeedBack()
{
   const string d = " ";
   string x, y, t, h, p, b, str, s, msg;

   FOREVER
   {
       x = NumToStr(curX);
       y = NumToStr(curY);
       h = NumToStr(heading);
       p = NumToStr(curPan);
       b = NumToStr(battery());
       s = NumToStr(STATUS);
       str = StrCat(x,d,y,d,h,d,p,d,b,d,s);

      ReceiveMessage(OUTBOX,false,msg);

      if( StrLen(msg) > 0 )
      {
       ReceiveMessage(OUTBOX,true,msg);
      }

      SendResponseString(OUTBOX,str);

      Wait(23);
   }
}

task main()
{
 Precedes(receiveCommand,cmdPan,cmdStop,sendFeedBack);

 setSonarRaw();
 setLightRaw();
}
