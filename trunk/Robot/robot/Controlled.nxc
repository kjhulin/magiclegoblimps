#include "robot.h"

#define CAMBOX 3

mutex mailbox;
int numCmd = 0;

bool testCommand(string msg, string cmd)
{
 int len = StrLen(cmd);
 return (StrLen(msg) >= len && SubStr(msg,0,len) == cmd);
}

string readInbox(bool clear)
{
 Acquire(mailbox);
 string msg;
 ReceiveMessage(INBOX,clear,msg);
 Release(mailbox);
 return msg;
}

task receiveCommand()
{
 //Precedes(receiveCommand);

 string msg = "";

 FOREVER
 {
  setLightOff();
  
  Wait(100);
  TextOut(0,0,NumToStr(getStatus()),true);
  TextOut(0,LCD_LINE1,NumToStr(battery()),false);
  TextOut(75,LCD_LINE1,"cmd",false);
  TextOut(0,LCD_LINE5,NumToStr(numCmd),false);
  msg = readInbox(false);
  
  if(StrLen(msg)>0)
  {
   numCmd++;

   if( testCommand(msg,"stop")
    /*|| testCommand(msg,"pan")
    || testCommand(msg,"pid")*/ )
   {
    continue;
   }
   
   msg = readInbox(true);

   if( testCommand(msg,"left" ) || testCommand(msg,"4") )
   {
    /*turnLeftWait( 400, 300 );
    lineCorrect();*/
    turnLeftLine();
    stopWheels();
   }
   else if( testCommand(msg,"right" ) || testCommand(msg,"6") )
   {
    /*turnRightWait( 400, 300 );
    lineCorrect();*/
    turnRightLine();
    stopWheels();
   }
   else if( testCommand(msg,"turnaround" ) || testCommand(msg,"2") )
   {
    //turnAround();
    turnaroundLine();
   }
   else if( testCommand(msg,"calibrate" ) || testCommand(msg,"5") )
   {
    //calibrate();
    calibrateLine();
   }

   else if( testCommand(msg,"correct") )
   {
    lineCorrect();
   }
   else if( testCommand(msg,"forward") || testCommand(msg,"8") )
   {
     lineFollow();
   }

   else if( testCommand(msg,"coordinates") )
   {
    int i,x,y,h,len=StrLen(msg);
    
    // get first space
    for( i=0; i<len; i++)
    {
     if( SubStr(msg,i,1) == " ")
     {
      x=i+1;
     }
    }
    // get second space
    for(; i<len; i++)
    {
     if( SubStr(msg,i,1) == " " )
     {
      y=i+1;
     }
    }
    for(; i<len; i++)
    {
     if( SubStr(msg,i,1) == " " )
     {
      h=i+1;
     }
    }
    // test for extra space
    for(; i<len; i++)
    {
     if( SubStr(msg,i,1) == " " )
     {
      break;
     }
    }
    //get new curX and curY
    if( x<y && y<h && h<i )
    {
     string t = SubStr(msg,x,y-x-1);
     curX = StrToNum(t);
     t = SubStr(msg,y,h-y-1);
     curY = StrToNum(t);
     t = SubStr(msg,h,i-h);  // might need to i-h+1
     heading = StrToNum(t);
    }
    else
    {
     PlayTone(10000,50);
    }

   }
   //*/
   else
   {
    PlayTone(1000,50);
   }
   
   Wait(15);

  }
 }
}

task cmdPan()
{
 //Precedes(cmdPan);

 string msg;

 FOREVER
 {
  TextOut(75,LCD_LINE3,"pan",false);
  
  ReceiveMessage(CAMBOX,true,msg);

  if( StrLen(msg)>0 && testCommand(msg,"pan") )
  {
   msg = SubStr( msg, 4, StrLen(msg) );

   pan( StrToNum( msg ) ); // send deg
  }
  
  Wait(27);
 }
}


// only stops forward command
task cmdStop()
{
 //Precedes(cmdStop);

 string msg;

 FOREVER
 {
  TextOut(75,LCD_LINE5,"stop",false);
  
  msg = readInbox(false);

  if( StrLen(msg)>0 && testCommand(msg,"stop") )
  {
    msg = readInbox(true);

   //StopTask(receiveCommand); // requires Enhanced Firmware
   //StartTask(receiveCommand);

    setStatus(STOPPED);
    /*
    repeat(10)
     stopWheels();
     */
  }
  
  Wait(31);
 }
}

task sendFeedBack()
{
//   Precedes(sendFeedBack);

   const string d = " ";
   string x, y, t, h, p, b, str, s, msg;

   FOREVER
   {
       TextOut(75,LCD_LINE7,"feed",false);
       
       x = NumToStr(getX());
       y = NumToStr(getY());
       h = NumToStr(getHeading());
       p = NumToStr(getPan());
       b = NumToStr(battery());
       s = NumToStr(getStatus());
       str = StrCat(x,d,y,d,h,d,p,d,b,d,s);

      ReceiveMessage(OUTBOX,false,msg);

      if( StrLen(msg) > 0 )
      {
       ReceiveMessage(OUTBOX,true,msg);
      }

      SendResponseString(OUTBOX,str);

      Wait(23);
   }
}


task main()
{
 Precedes(receiveCommand,cmdPan,cmdStop,sendFeedBack);

 // empty inbox
 string msg;
 do{
    msg = readInbox(true);
 } while(StrLen(msg)>0);
 do{
    ReceiveMessage(CAMBOX,true,msg);
 } while(StrLen(msg)>0);

 setSonarRaw();
 setLightRaw();
 
 curX = 0;
 curY = -1;
}
